{"version":3,"sources":["api.ts","types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","getUser","userId","TodoList","todos","isSelectedTodoId","setIsSelectedTodoId","setIsLoadedUser","className","map","todo","id","title","completed","classNames","type","onClick","TodoFilter","query","setQuery","filterType","setFilterType","value","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoModal","isSelectedTodo","isLoadedUser","useState","user","setUser","useEffect","getUserFromServer","a","userFromServer","Error","href","email","name","App","setTodos","isLoadedTodos","setIsLoadedTodos","ALL","getTodosFromServer","todosFromServer","todoId","filteredTodos","visibleTodos","filter","toLowerCase","includes","COMPLETED","ACTIVE","getFilteredTodos","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32dda8de.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  isSelectedTodoId: number,\n  setIsSelectedTodoId: (todoId: number) => void;\n  setIsLoadedUser: (status: boolean) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  isSelectedTodoId,\n  setIsSelectedTodoId,\n  setIsLoadedUser,\n}) => {\n  const onSelectTodo = (todoId: number) => {\n    setIsSelectedTodoId(todoId);\n    setIsLoadedUser(false);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className=\"\"\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  { 'has-text-danger': !completed },\n                  { 'has-text-success': completed },\n                )}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelectTodo(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far',\n                      { 'fa-eye-slash': isSelectedTodoId === id },\n                      { 'fa-eye': isSelectedTodoId !== id })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ninterface Props {\n  query: string,\n  setQuery: (query: string) => void;\n  filterType: FilterType;\n  setFilterType: (filterType: FilterType) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  filterType,\n  setFilterType,\n}) => {\n  const clearQuery = () => {\n    setQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={event => {\n              setFilterType(event.target.value as FilterType);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => {\n            setQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\n\nimport { getUser } from '../../api';\n\nimport { Loader } from '../Loader';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  isSelectedTodo: Todo,\n  setIsSelectedTodoId: (todoId: number) => void;\n  isLoadedUser: boolean;\n  setIsLoadedUser: (status: boolean) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  isSelectedTodo,\n  setIsSelectedTodoId,\n  isLoadedUser,\n  setIsLoadedUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = isSelectedTodo;\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n        setIsLoadedUser(true);\n      } catch (error) {\n        throw new Error('Failed on loading user from server');\n      }\n    };\n\n    getUserFromServer();\n  }, []);\n\n  const onCloseTodo = () => {\n    setIsSelectedTodoId(0);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoadedUser\n        ? (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onCloseTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )\n        : <Loader />}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\n\nexport const getFilteredTodos = (todos: Todo[], query: string, filterType: FilterType) => {\n  const visibleTodos = todos.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n\n  switch (filterType) {\n    case FilterType.COMPLETED:\n      return visibleTodos.filter(todo => todo.completed);\n\n    case FilterType.ACTIVE:\n      return visibleTodos.filter(todo => !todo.completed);\n\n    default:\n      return visibleTodos;\n  }\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isSelectedTodoId, setIsSelectedTodoId] = useState(0);\n  const [isLoadedTodos, setIsLoadedTodos] = useState(false);\n  const [isLoadedUser, setIsLoadedUser] = useState(false);\n  const [filterType, setFilterType] = useState<FilterType>(FilterType.ALL);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    const getTodosFromServer = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        setTodos(todosFromServer);\n        setIsLoadedTodos(true);\n      } catch (error) {\n        throw new Error('Failed on loading todos from server');\n      }\n    };\n\n    getTodosFromServer();\n  }, []);\n\n  const filteredTodos = getFilteredTodos(todos, query, filterType);\n\n  const getTodoById = (todoId: number) => {\n    return todos.find(todo => todo.id === todoId) || todos[0];\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterType={filterType}\n                setFilterType={setFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoadedTodos\n                ? (\n                  <TodoList\n                    todos={filteredTodos}\n                    isSelectedTodoId={isSelectedTodoId}\n                    setIsSelectedTodoId={setIsSelectedTodoId}\n                    setIsLoadedUser={setIsLoadedUser}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isSelectedTodoId !== 0 && (\n        <TodoModal\n          isSelectedTodo={getTodoById(isSelectedTodoId)}\n          setIsSelectedTodoId={setIsSelectedTodoId}\n          isLoadedUser={isLoadedUser}\n          setIsLoadedUser={setIsLoadedUser}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}